//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAdminClient {
    getTasksCountByUser(): Observable<ErrorOrOfListOfUserTaskCountDto>;
    getTasksDueToday(): Observable<ErrorOrOfListOfTaskDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AdminClient implements IAdminClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getTasksCountByUser(): Observable<ErrorOrOfListOfUserTaskCountDto> {
        let url_ = this.baseUrl + "/api/Admin/GetTasksCountByUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTasksCountByUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTasksCountByUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ErrorOrOfListOfUserTaskCountDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ErrorOrOfListOfUserTaskCountDto>;
        }));
    }

    protected processGetTasksCountByUser(response: HttpResponseBase): Observable<ErrorOrOfListOfUserTaskCountDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ErrorOrOfListOfUserTaskCountDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getTasksDueToday(): Observable<ErrorOrOfListOfTaskDto> {
        let url_ = this.baseUrl + "/api/Admin/GetTasksDueToday";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTasksDueToday(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTasksDueToday(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ErrorOrOfListOfTaskDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ErrorOrOfListOfTaskDto>;
        }));
    }

    protected processGetTasksDueToday(response: HttpResponseBase): Observable<ErrorOrOfListOfTaskDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ErrorOrOfListOfTaskDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAuthenticationClient {
    login(userDto: LoginUserDto): Observable<AuthenticationResponseDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AuthenticationClient implements IAuthenticationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    login(userDto: LoginUserDto): Observable<AuthenticationResponseDto> {
        let url_ = this.baseUrl + "/api/Authentication/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthenticationResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthenticationResponseDto>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<AuthenticationResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticationResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ITaskClient {
    addTask(taskDto: TaskDto): Observable<number>;
    updateTask(taskDto: TaskDto): Observable<boolean>;
    deleteTask(taskId: number): Observable<boolean>;
    getTasks(filter: TasksFilter): Observable<ErrorOrOfPaginatedListOfTaskDto>;
    getTaskById(id: number): Observable<ErrorOrOfPaginatedListOfTaskDto>;
    getTaskByStatusAndUserId(status: Status, userId: string | null): Observable<ErrorOrOfListOfTaskDto>;
}

@Injectable({
    providedIn: 'root'
})
export class TaskClient implements ITaskClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    addTask(taskDto: TaskDto): Observable<number> {
        let url_ = this.baseUrl + "/api/Task/AddTask";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(taskDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddTask(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddTask(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processAddTask(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateTask(taskDto: TaskDto): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Task/UpdateTask";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(taskDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTask(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTask(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processUpdateTask(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteTask(taskId: number): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Task/DeleteTask/{taskId}";
        if (taskId === undefined || taskId === null)
            throw new Error("The parameter 'taskId' must be defined.");
        url_ = url_.replace("{taskId}", encodeURIComponent("" + taskId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteTask(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTask(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processDeleteTask(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getTasks(filter: TasksFilter): Observable<ErrorOrOfPaginatedListOfTaskDto> {
        let url_ = this.baseUrl + "/api/Task/GetTasks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTasks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTasks(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ErrorOrOfPaginatedListOfTaskDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ErrorOrOfPaginatedListOfTaskDto>;
        }));
    }

    protected processGetTasks(response: HttpResponseBase): Observable<ErrorOrOfPaginatedListOfTaskDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ErrorOrOfPaginatedListOfTaskDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getTaskById(id: number): Observable<ErrorOrOfPaginatedListOfTaskDto> {
        let url_ = this.baseUrl + "/api/Task/GetTaskById/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTaskById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTaskById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ErrorOrOfPaginatedListOfTaskDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ErrorOrOfPaginatedListOfTaskDto>;
        }));
    }

    protected processGetTaskById(response: HttpResponseBase): Observable<ErrorOrOfPaginatedListOfTaskDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ErrorOrOfPaginatedListOfTaskDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getTaskByStatusAndUserId(status: Status, userId: string | null): Observable<ErrorOrOfListOfTaskDto> {
        let url_ = this.baseUrl + "/api/Task/GetTaskByStatusAndUserId/{status}/{userId}";
        if (status === undefined || status === null)
            throw new Error("The parameter 'status' must be defined.");
        url_ = url_.replace("{status}", encodeURIComponent("" + status));
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTaskByStatusAndUserId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTaskByStatusAndUserId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ErrorOrOfListOfTaskDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ErrorOrOfListOfTaskDto>;
        }));
    }

    protected processGetTaskByStatusAndUserId(response: HttpResponseBase): Observable<ErrorOrOfListOfTaskDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ErrorOrOfListOfTaskDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUserClient {
    addUser(userDto: RegisterUserDto): Observable<string>;
    updateUserPUT(updateUserDto: UpdateUserDto): Observable<boolean>;
    updateUserDELETE(userId: string | undefined): Observable<boolean>;
    getUsers(userId: string | null): Observable<boolean>;
}

@Injectable({
    providedIn: 'root'
})
export class UserClient implements IUserClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    addUser(userDto: RegisterUserDto): Observable<string> {
        let url_ = this.baseUrl + "/api/User/AddUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processAddUser(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateUserPUT(updateUserDto: UpdateUserDto): Observable<boolean> {
        let url_ = this.baseUrl + "/api/User/UpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateUserDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processUpdateUserPUT(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateUserDELETE(userId: string | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/User/DeleteUser?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processUpdateUserDELETE(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getUsers(userId: string | null): Observable<boolean> {
        let url_ = this.baseUrl + "/api/User/GetUsers/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processGetUsers(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

/** A discriminated union of errors or a value. */
export class ErrorOrOfListOfUserTaskCountDto implements IErrorOrOfListOfUserTaskCountDto {
    /** Gets a value indicating whether the state is error. */
    isError?: boolean;
    /** Gets the list of errors. If the state is not error, the list will contain a single error representing the state. */
    errors?: ErrorDto[];
    /** Gets the list of errors. If the state is not error, the list will be empty. */
    errorsOrEmptyList?: ErrorDto[];
    /** Gets the value. */
    value?: UserTaskCountDto[];
    /** Gets the first error. */
    firstError?: ErrorDto;

    constructor(data?: IErrorOrOfListOfUserTaskCountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            if (Array.isArray(_data["errorsOrEmptyList"])) {
                this.errorsOrEmptyList = [] as any;
                for (let item of _data["errorsOrEmptyList"])
                    this.errorsOrEmptyList!.push(ErrorDto.fromJS(item));
            }
            if (Array.isArray(_data["value"])) {
                this.value = [] as any;
                for (let item of _data["value"])
                    this.value!.push(UserTaskCountDto.fromJS(item));
            }
            this.firstError = _data["firstError"] ? ErrorDto.fromJS(_data["firstError"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ErrorOrOfListOfUserTaskCountDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorOrOfListOfUserTaskCountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.errorsOrEmptyList)) {
            data["errorsOrEmptyList"] = [];
            for (let item of this.errorsOrEmptyList)
                data["errorsOrEmptyList"].push(item.toJSON());
        }
        if (Array.isArray(this.value)) {
            data["value"] = [];
            for (let item of this.value)
                data["value"].push(item.toJSON());
        }
        data["firstError"] = this.firstError ? this.firstError.toJSON() : <any>undefined;
        return data;
    }
}

/** A discriminated union of errors or a value. */
export interface IErrorOrOfListOfUserTaskCountDto {
    /** Gets a value indicating whether the state is error. */
    isError?: boolean;
    /** Gets the list of errors. If the state is not error, the list will contain a single error representing the state. */
    errors?: ErrorDto[];
    /** Gets the list of errors. If the state is not error, the list will be empty. */
    errorsOrEmptyList?: ErrorDto[];
    /** Gets the value. */
    value?: UserTaskCountDto[];
    /** Gets the first error. */
    firstError?: ErrorDto;
}

/** Represents an error. */
export class ErrorDto implements IErrorDto {
    /** Gets the unique error code. */
    code?: string;
    /** Gets the error description. */
    description?: string;
    /** Gets the error type. */
    type?: ErrorType;
    /** Gets the numeric value of the type. */
    numericType?: number;
    /** Gets the metadata. */
    metadata?: { [key: string]: any; } | undefined;

    constructor(data?: IErrorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.description = _data["description"];
            this.type = _data["type"];
            this.numericType = _data["numericType"];
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): ErrorDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["description"] = this.description;
        data["type"] = this.type;
        data["numericType"] = this.numericType;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

/** Represents an error. */
export interface IErrorDto {
    /** Gets the unique error code. */
    code?: string;
    /** Gets the error description. */
    description?: string;
    /** Gets the error type. */
    type?: ErrorType;
    /** Gets the numeric value of the type. */
    numericType?: number;
    /** Gets the metadata. */
    metadata?: { [key: string]: any; } | undefined;
}

/** Error types. */
export enum ErrorType {
    Failure = 0,
    Unexpected = 1,
    Validation = 2,
    Conflict = 3,
    NotFound = 4,
    Unauthorized = 5,
    Forbidden = 6,
}

export class UserTaskCountDto implements IUserTaskCountDto {
    userId?: string | undefined;
    taskCount?: number;

    constructor(data?: IUserTaskCountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.taskCount = _data["taskCount"];
        }
    }

    static fromJS(data: any): UserTaskCountDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserTaskCountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["taskCount"] = this.taskCount;
        return data;
    }
}

export interface IUserTaskCountDto {
    userId?: string | undefined;
    taskCount?: number;
}

/** A discriminated union of errors or a value. */
export class ErrorOrOfListOfTaskDto implements IErrorOrOfListOfTaskDto {
    /** Gets a value indicating whether the state is error. */
    isError?: boolean;
    /** Gets the list of errors. If the state is not error, the list will contain a single error representing the state. */
    errors?: ErrorDto[];
    /** Gets the list of errors. If the state is not error, the list will be empty. */
    errorsOrEmptyList?: ErrorDto[];
    /** Gets the value. */
    value?: TaskDto[];
    /** Gets the first error. */
    firstError?: ErrorDto;

    constructor(data?: IErrorOrOfListOfTaskDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            if (Array.isArray(_data["errorsOrEmptyList"])) {
                this.errorsOrEmptyList = [] as any;
                for (let item of _data["errorsOrEmptyList"])
                    this.errorsOrEmptyList!.push(ErrorDto.fromJS(item));
            }
            if (Array.isArray(_data["value"])) {
                this.value = [] as any;
                for (let item of _data["value"])
                    this.value!.push(TaskDto.fromJS(item));
            }
            this.firstError = _data["firstError"] ? ErrorDto.fromJS(_data["firstError"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ErrorOrOfListOfTaskDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorOrOfListOfTaskDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.errorsOrEmptyList)) {
            data["errorsOrEmptyList"] = [];
            for (let item of this.errorsOrEmptyList)
                data["errorsOrEmptyList"].push(item.toJSON());
        }
        if (Array.isArray(this.value)) {
            data["value"] = [];
            for (let item of this.value)
                data["value"].push(item.toJSON());
        }
        data["firstError"] = this.firstError ? this.firstError.toJSON() : <any>undefined;
        return data;
    }
}

/** A discriminated union of errors or a value. */
export interface IErrorOrOfListOfTaskDto {
    /** Gets a value indicating whether the state is error. */
    isError?: boolean;
    /** Gets the list of errors. If the state is not error, the list will contain a single error representing the state. */
    errors?: ErrorDto[];
    /** Gets the list of errors. If the state is not error, the list will be empty. */
    errorsOrEmptyList?: ErrorDto[];
    /** Gets the value. */
    value?: TaskDto[];
    /** Gets the first error. */
    firstError?: ErrorDto;
}

export class TaskDto implements ITaskDto {
    id?: number;
    title?: string;
    description?: string;
    status?: Status;
    priority?: PriorityLevel;
    dueDate?: Date;
    userId?: string;
    user?: UserDto | undefined;

    constructor(data?: ITaskDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.priority = _data["priority"];
            this.dueDate = _data["dueDate"] ? new Date(_data["dueDate"].toString()) : <any>undefined;
            this.userId = _data["userId"];
            this.user = _data["user"] ? UserDto.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TaskDto {
        data = typeof data === 'object' ? data : {};
        let result = new TaskDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["description"] = this.description;
        data["status"] = this.status;
        data["priority"] = this.priority;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>undefined;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITaskDto {
    id?: number;
    title?: string;
    description?: string;
    status?: Status;
    priority?: PriorityLevel;
    dueDate?: Date;
    userId?: string;
    user?: UserDto | undefined;
}

export enum Status {
    NotStarted = 1,
    InProgress = 2,
    Completed = 3,
    Deleted = 4,
}

export enum PriorityLevel {
    Low = 1,
    Medium = 2,
    High = 3,
}

export class UserDto implements IUserDto {
    id?: string;
    firstName?: string;
    lastName?: string;
    email?: string;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        return data;
    }
}

export interface IUserDto {
    id?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
}

export class AuthenticationResponseDto implements IAuthenticationResponseDto {
    id?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    token?: string;

    constructor(data?: IAuthenticationResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): AuthenticationResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["token"] = this.token;
        return data;
    }
}

export interface IAuthenticationResponseDto {
    id?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    token?: string;
}

export class LoginUserDto implements ILoginUserDto {
    email?: string;
    password?: string;

    constructor(data?: ILoginUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginUserDto {
    email?: string;
    password?: string;
}

/** A discriminated union of errors or a value. */
export class ErrorOrOfPaginatedListOfTaskDto implements IErrorOrOfPaginatedListOfTaskDto {
    /** Gets a value indicating whether the state is error. */
    isError?: boolean;
    /** Gets the list of errors. If the state is not error, the list will contain a single error representing the state. */
    errors?: ErrorDto[];
    /** Gets the list of errors. If the state is not error, the list will be empty. */
    errorsOrEmptyList?: ErrorDto[];
    /** Gets the value. */
    value?: PaginatedListOfTaskDto;
    /** Gets the first error. */
    firstError?: ErrorDto;

    constructor(data?: IErrorOrOfPaginatedListOfTaskDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            if (Array.isArray(_data["errorsOrEmptyList"])) {
                this.errorsOrEmptyList = [] as any;
                for (let item of _data["errorsOrEmptyList"])
                    this.errorsOrEmptyList!.push(ErrorDto.fromJS(item));
            }
            this.value = _data["value"] ? PaginatedListOfTaskDto.fromJS(_data["value"]) : <any>undefined;
            this.firstError = _data["firstError"] ? ErrorDto.fromJS(_data["firstError"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ErrorOrOfPaginatedListOfTaskDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorOrOfPaginatedListOfTaskDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.errorsOrEmptyList)) {
            data["errorsOrEmptyList"] = [];
            for (let item of this.errorsOrEmptyList)
                data["errorsOrEmptyList"].push(item.toJSON());
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["firstError"] = this.firstError ? this.firstError.toJSON() : <any>undefined;
        return data;
    }
}

/** A discriminated union of errors or a value. */
export interface IErrorOrOfPaginatedListOfTaskDto {
    /** Gets a value indicating whether the state is error. */
    isError?: boolean;
    /** Gets the list of errors. If the state is not error, the list will contain a single error representing the state. */
    errors?: ErrorDto[];
    /** Gets the list of errors. If the state is not error, the list will be empty. */
    errorsOrEmptyList?: ErrorDto[];
    /** Gets the value. */
    value?: PaginatedListOfTaskDto;
    /** Gets the first error. */
    firstError?: ErrorDto;
}

export class PaginatedListOfTaskDto implements IPaginatedListOfTaskDto {
    items?: TaskDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfTaskDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TaskDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfTaskDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfTaskDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfTaskDto {
    items?: TaskDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class TasksFilter implements ITasksFilter {
    title?: string | undefined;
    status?: Status | undefined;
    priorityLevel?: PriorityLevel | undefined;
    duoDate?: Date | undefined;
    pageSize?: number;
    pageNumber?: number;
    orderBy?: TasksOrderByEnum;
    isDesc?: boolean;

    constructor(data?: ITasksFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.status = _data["status"];
            this.priorityLevel = _data["priorityLevel"];
            this.duoDate = _data["duoDate"] ? new Date(_data["duoDate"].toString()) : <any>undefined;
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.orderBy = _data["orderBy"];
            this.isDesc = _data["isDesc"];
        }
    }

    static fromJS(data: any): TasksFilter {
        data = typeof data === 'object' ? data : {};
        let result = new TasksFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["status"] = this.status;
        data["priorityLevel"] = this.priorityLevel;
        data["duoDate"] = this.duoDate ? this.duoDate.toISOString() : <any>undefined;
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["orderBy"] = this.orderBy;
        data["isDesc"] = this.isDesc;
        return data;
    }
}

export interface ITasksFilter {
    title?: string | undefined;
    status?: Status | undefined;
    priorityLevel?: PriorityLevel | undefined;
    duoDate?: Date | undefined;
    pageSize?: number;
    pageNumber?: number;
    orderBy?: TasksOrderByEnum;
    isDesc?: boolean;
}

export enum TasksOrderByEnum {
    DuoDate = 1,
    Priority = 2,
    CreationDate = 3,
}

export class RegisterUserDto implements IRegisterUserDto {
    firstName?: string;
    lastName?: string;
    password?: string;
    email?: string;

    constructor(data?: IRegisterUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.password = _data["password"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): RegisterUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["password"] = this.password;
        data["email"] = this.email;
        return data;
    }
}

export interface IRegisterUserDto {
    firstName?: string;
    lastName?: string;
    password?: string;
    email?: string;
}

export class UpdateUserDto implements IUpdateUserDto {
    userId?: string;
    email?: string;
    firstName?: string;
    lastName?: string;

    constructor(data?: IUpdateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): UpdateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface IUpdateUserDto {
    userId?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}